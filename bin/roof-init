#!/usr/bin/env node

var program = require('commander');
var install = require('spawn-npm-install')
var path = require('path');
var fs = require('fs');
var join = path.join;
var mkdir = require('mkdirp').sync;
var exists = fs.existsSync;
var read = fs.readFileSync;

// usage

program.usage('[dir]');

// options

program
  .parse(process.argv);

// config

var conf = {};

// dest

var dir = '.';

// already a roof

if (exists(join(dir, 'roof.json'))) {
  console.error('current is already a roof project');
  process.exit(1);
} else {
  // populate json
  write(join(dir, '/roof.json'), createRoofJson());
}

if (exists(join(dir, 'package.json'))) {
  console.error('missing package.json');
  process.exit(1);
}

/**
 * Verbose write.
 */

function write(path, str) {
  if (exists(path)) {
    console.warn('exists', path);
  } else {
    console.log('create', path);
    fs.writeFileSync(path, str);
  }
}

// mkdir
console.log('create', dir);
mkdir(dir + '/data');
mkdir(dir + '/events');

// copy from src
var template = read('../src/index.js', 'utf8');
write(join(dir + '/data/index.js'), template);
write(join(dir + '/events/index.js'), template);

// 全局安装roof

fs.readFile('../package.json', function (err, data) {
  try {
    data = JSON.parse(data.toString("utf8"))
  } catch (ex) {
    ex = ex
  }
  if (!data.dependencies.roof) {
    // data.dependencies.roof = '0.0.1';
    // fs.writeFileSync('../package.json', JSON.stringify(data, null, 2));
    install(['roof'], { saveDev: true, stdio: 'inherit' }, function(err) {
      if (err) {
        console.error("Could not install:\n" + err.message)
      }
      else {
        console.log("Roof installed.")
      }
    });
  }
});

console.log('');


// create a roof.json

function createRoofJson() {
  var buf = '';

  buf += '{\n'
  buf += '  "dir": {\n';
  buf += '    "data": "data",\n';
  buf += '    "events": "events"\n';
  buf += '  },\n'

  buf += '  "modules": {\n';
  buf += '    "data": [],\n';
  buf += '    "events": []\n';
  buf += '  }\n'

  buf += '}\n'

  return buf;
}
